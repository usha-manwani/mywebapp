//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CresijApp.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    [DbConfigurationType(typeof(MySql.Data.EntityFramework.MySqlEFConfiguration))]
    public partial class OrganisationdatabaseEntities : DbContext
    {
        public OrganisationdatabaseEntities()
            : base("name=OrganisationdatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<buildingdetail> buildingdetails { get; set; }
        public virtual DbSet<classdetail> classdetails { get; set; }
        public virtual DbSet<course> courses { get; set; }
        public virtual DbSet<current_loggeduser> current_loggeduser { get; set; }
        public virtual DbSet<departmentdetail> departmentdetails { get; set; }
        public virtual DbSet<floordetail> floordetails { get; set; }
        public virtual DbSet<operationmgmt> operationmgmts { get; set; }
        public virtual DbSet<reserveandtransfer> reserveandtransfers { get; set; }
        public virtual DbSet<roledetail> roledetails { get; set; }
        public virtual DbSet<schedule> schedules { get; set; }
        public virtual DbSet<scheduleoriginal> scheduleoriginals { get; set; }
        public virtual DbSet<schedulereserve> schedulereserves { get; set; }
        public virtual DbSet<scheduletransfer> scheduletransfers { get; set; }
        public virtual DbSet<sectionsinfo> sectionsinfoes { get; set; }
        public virtual DbSet<semesterinfo> semesterinfoes { get; set; }
        public virtual DbSet<strategydescription> strategydescriptions { get; set; }
        public virtual DbSet<strategyequipment> strategyequipments { get; set; }
        public virtual DbSet<strategymanagement> strategymanagements { get; set; }
        public virtual DbSet<studentdata> studentdatas { get; set; }
        public virtual DbSet<systemsetting> systemsettings { get; set; }
        public virtual DbSet<teacherdata> teacherdatas { get; set; }
        public virtual DbSet<temp_centralcontrol> temp_centralcontrol { get; set; }
        public virtual DbSet<userdetail> userdetails { get; set; }
        public virtual DbSet<userlocationaccess> userlocationaccesses { get; set; }
        public virtual DbSet<userlog> userlogs { get; set; }
        public virtual DbSet<userpermission> userpermissions { get; set; }
        public virtual DbSet<userregistration> userregistrations { get; set; }
    
        public virtual int sp_DeleteBuilding(Nullable<int> sno)
        {
            var snoParameter = sno.HasValue ?
                new ObjectParameter("sno", sno) :
                new ObjectParameter("sno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteBuilding", snoParameter);
        }
    
        public virtual int sp_DeleteClass(Nullable<int> idno)
        {
            var idnoParameter = idno.HasValue ?
                new ObjectParameter("idno", idno) :
                new ObjectParameter("idno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteClass", idnoParameter);
        }
    
        public virtual int sp_DeleteFloor(Nullable<int> floorid)
        {
            var flooridParameter = floorid.HasValue ?
                new ObjectParameter("floorid", floorid) :
                new ObjectParameter("floorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteFloor", flooridParameter);
        }
    
        public virtual int sp_deleteSection(string semname)
        {
            var semnameParameter = semname != null ?
                new ObjectParameter("semname", semname) :
                new ObjectParameter("semname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteSection", semnameParameter);
        }
    
        public virtual int sp_DeleteUser(string userid)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteUser", useridParameter);
        }
    
        public virtual ObjectResult<sp_GetAllClassDetails_Result> sp_GetAllClassDetails(Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount)
        {
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllClassDetails_Result>("sp_GetAllClassDetails", p_PageIndexParameter, p_PageSizeParameter, p_RecordCount);
        }
    
        public virtual ObjectResult<sp_GetAllUserDetails_Result> sp_GetAllUserDetails(Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount)
        {
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllUserDetails_Result>("sp_GetAllUserDetails", p_PageIndexParameter, p_PageSizeParameter, p_RecordCount);
        }
    
        public virtual ObjectResult<sp_GetBuildingDetailsInfo_Result> sp_GetBuildingDetailsInfo(Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount)
        {
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetBuildingDetailsInfo_Result>("sp_GetBuildingDetailsInfo", p_PageIndexParameter, p_PageSizeParameter, p_RecordCount);
        }
    
        public virtual ObjectResult<sp_GetClassIPByBuilding_Result> sp_GetClassIPByBuilding(Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount, Nullable<int> building, string userid)
        {
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            var buildingParameter = building.HasValue ?
                new ObjectParameter("building", building) :
                new ObjectParameter("building", typeof(int));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetClassIPByBuilding_Result>("sp_GetClassIPByBuilding", p_PageIndexParameter, p_PageSizeParameter, p_RecordCount, buildingParameter, useridParameter);
        }
    
        public virtual ObjectResult<sp_GetIPClassByBuildingFloor_Result> sp_GetIPClassByBuildingFloor(Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount, string building, string userid, string floornum)
        {
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            var buildingParameter = building != null ?
                new ObjectParameter("building", building) :
                new ObjectParameter("building", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var floornumParameter = floornum != null ?
                new ObjectParameter("floornum", floornum) :
                new ObjectParameter("floornum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetIPClassByBuildingFloor_Result>("sp_GetIPClassByBuildingFloor", p_PageIndexParameter, p_PageSizeParameter, p_RecordCount, buildingParameter, useridParameter, floornumParameter);
        }
    
        public virtual ObjectResult<sp_GetOperationMgmtData_Result> sp_GetOperationMgmtData(Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount)
        {
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOperationMgmtData_Result>("sp_GetOperationMgmtData", p_PageIndexParameter, p_PageSizeParameter, p_RecordCount);
        }
    
        public virtual int sp_GetScheduleByDate(Nullable<System.DateTime> customdate, Nullable<int> building, string userid, Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount)
        {
            var customdateParameter = customdate.HasValue ?
                new ObjectParameter("customdate", customdate) :
                new ObjectParameter("customdate", typeof(System.DateTime));
    
            var buildingParameter = building.HasValue ?
                new ObjectParameter("building", building) :
                new ObjectParameter("building", typeof(int));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetScheduleByDate", customdateParameter, buildingParameter, useridParameter, p_PageIndexParameter, p_PageSizeParameter, p_RecordCount);
        }
    
        public virtual ObjectResult<Sp_GetScheduleByDay_Result> Sp_GetScheduleByDay(Nullable<int> build, Nullable<int> weekno, Nullable<int> sem, Nullable<int> daynum, string userid, Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount)
        {
            var buildParameter = build.HasValue ?
                new ObjectParameter("build", build) :
                new ObjectParameter("build", typeof(int));
    
            var weeknoParameter = weekno.HasValue ?
                new ObjectParameter("weekno", weekno) :
                new ObjectParameter("weekno", typeof(int));
    
            var semParameter = sem.HasValue ?
                new ObjectParameter("sem", sem) :
                new ObjectParameter("sem", typeof(int));
    
            var daynumParameter = daynum.HasValue ?
                new ObjectParameter("daynum", daynum) :
                new ObjectParameter("daynum", typeof(int));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetScheduleByDay_Result>("Sp_GetScheduleByDay", buildParameter, weeknoParameter, semParameter, daynumParameter, useridParameter, p_PageIndexParameter, p_PageSizeParameter, p_RecordCount);
        }
    
        public virtual ObjectResult<sp_GetStudentData_Result> sp_GetStudentData(Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount)
        {
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetStudentData_Result>("sp_GetStudentData", p_PageIndexParameter, p_PageSizeParameter, p_RecordCount);
        }
    
        public virtual ObjectResult<sp_GetTeacherData_Result> sp_GetTeacherData(Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount)
        {
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTeacherData_Result>("sp_GetTeacherData", p_PageIndexParameter, p_PageSizeParameter, p_RecordCount);
        }
    
        public virtual int sp_GetTransferScheduleByDate(string building, Nullable<System.DateTime> customdate, string userid, Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount)
        {
            var buildingParameter = building != null ?
                new ObjectParameter("building", building) :
                new ObjectParameter("building", typeof(string));
    
            var customdateParameter = customdate.HasValue ?
                new ObjectParameter("customdate", customdate) :
                new ObjectParameter("customdate", typeof(System.DateTime));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetTransferScheduleByDate", buildingParameter, customdateParameter, useridParameter, p_PageIndexParameter, p_PageSizeParameter, p_RecordCount);
        }
    
        public virtual ObjectResult<sp_GetTransferScheduleByDay_Result> sp_GetTransferScheduleByDay(string build, Nullable<int> weekno, Nullable<int> sem, Nullable<int> daynum, string userid, Nullable<int> p_PageIndex, Nullable<int> p_PageSize, ObjectParameter p_RecordCount)
        {
            var buildParameter = build != null ?
                new ObjectParameter("build", build) :
                new ObjectParameter("build", typeof(string));
    
            var weeknoParameter = weekno.HasValue ?
                new ObjectParameter("weekno", weekno) :
                new ObjectParameter("weekno", typeof(int));
    
            var semParameter = sem.HasValue ?
                new ObjectParameter("sem", sem) :
                new ObjectParameter("sem", typeof(int));
    
            var daynumParameter = daynum.HasValue ?
                new ObjectParameter("daynum", daynum) :
                new ObjectParameter("daynum", typeof(int));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var p_PageIndexParameter = p_PageIndex.HasValue ?
                new ObjectParameter("p_PageIndex", p_PageIndex) :
                new ObjectParameter("p_PageIndex", typeof(int));
    
            var p_PageSizeParameter = p_PageSize.HasValue ?
                new ObjectParameter("p_PageSize", p_PageSize) :
                new ObjectParameter("p_PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTransferScheduleByDay_Result>("sp_GetTransferScheduleByDay", buildParameter, weeknoParameter, semParameter, daynumParameter, useridParameter, p_PageIndexParameter, p_PageSizeParameter, p_RecordCount);
        }
    
        public virtual int sp_GetUserLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetUserLogs");
        }
    
        public virtual int sp_GetWeekByDate(Nullable<System.DateTime> customdate, ObjectParameter weekno)
        {
            var customdateParameter = customdate.HasValue ?
                new ObjectParameter("customdate", customdate) :
                new ObjectParameter("customdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetWeekByDate", customdateParameter, weekno);
        }
    
        public virtual ObjectResult<sp_GetYearAndSemester_Result> sp_GetYearAndSemester(Nullable<System.DateTime> customdate, ObjectParameter semname, ObjectParameter schoolyear)
        {
            var customdateParameter = customdate.HasValue ?
                new ObjectParameter("customdate", customdate) :
                new ObjectParameter("customdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetYearAndSemester_Result>("sp_GetYearAndSemester", customdateParameter, semname, schoolyear);
        }
    
        public virtual int sp_InsertBuildingDetails(string deptname, string buscode, string que, string typeaccess, string notes)
        {
            var deptnameParameter = deptname != null ?
                new ObjectParameter("deptname", deptname) :
                new ObjectParameter("deptname", typeof(string));
    
            var buscodeParameter = buscode != null ?
                new ObjectParameter("buscode", buscode) :
                new ObjectParameter("buscode", typeof(string));
    
            var queParameter = que != null ?
                new ObjectParameter("que", que) :
                new ObjectParameter("que", typeof(string));
    
            var typeaccessParameter = typeaccess != null ?
                new ObjectParameter("typeaccess", typeaccess) :
                new ObjectParameter("typeaccess", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertBuildingDetails", deptnameParameter, buscodeParameter, queParameter, typeaccessParameter, notesParameter);
        }
    
        public virtual int sp_InsertChangeSchedule(string oldclass, string course, string newcl, string weeknum, string teacherid, Nullable<int> sec, Nullable<int> daynum, Nullable<int> buildingname, string reason, Nullable<int> scid)
        {
            var oldclassParameter = oldclass != null ?
                new ObjectParameter("oldclass", oldclass) :
                new ObjectParameter("oldclass", typeof(string));
    
            var courseParameter = course != null ?
                new ObjectParameter("course", course) :
                new ObjectParameter("course", typeof(string));
    
            var newclParameter = newcl != null ?
                new ObjectParameter("newcl", newcl) :
                new ObjectParameter("newcl", typeof(string));
    
            var weeknumParameter = weeknum != null ?
                new ObjectParameter("weeknum", weeknum) :
                new ObjectParameter("weeknum", typeof(string));
    
            var teacheridParameter = teacherid != null ?
                new ObjectParameter("teacherid", teacherid) :
                new ObjectParameter("teacherid", typeof(string));
    
            var secParameter = sec.HasValue ?
                new ObjectParameter("sec", sec) :
                new ObjectParameter("sec", typeof(int));
    
            var daynumParameter = daynum.HasValue ?
                new ObjectParameter("daynum", daynum) :
                new ObjectParameter("daynum", typeof(int));
    
            var buildingnameParameter = buildingname.HasValue ?
                new ObjectParameter("buildingname", buildingname) :
                new ObjectParameter("buildingname", typeof(int));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("reason", reason) :
                new ObjectParameter("reason", typeof(string));
    
            var scidParameter = scid.HasValue ?
                new ObjectParameter("scid", scid) :
                new ObjectParameter("scid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertChangeSchedule", oldclassParameter, courseParameter, newclParameter, weeknumParameter, teacheridParameter, secParameter, daynumParameter, buildingnameParameter, reasonParameter, scidParameter);
        }
    
        public virtual int sp_insertClass(string @class, string grade, string ip, ObjectParameter ids)
        {
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(string));
    
            var ipParameter = ip != null ?
                new ObjectParameter("ip", ip) :
                new ObjectParameter("ip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertClass", classParameter, gradeParameter, ipParameter, ids);
        }
    
        public virtual int sp_insertCurrentUser(string userid)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertCurrentUser", useridParameter);
        }
    
        public virtual int sp_InsertFloorDetails(string flname, string buscode, string highoff, Nullable<int> que, string typeaccess, string notes)
        {
            var flnameParameter = flname != null ?
                new ObjectParameter("flname", flname) :
                new ObjectParameter("flname", typeof(string));
    
            var buscodeParameter = buscode != null ?
                new ObjectParameter("buscode", buscode) :
                new ObjectParameter("buscode", typeof(string));
    
            var highoffParameter = highoff != null ?
                new ObjectParameter("highoff", highoff) :
                new ObjectParameter("highoff", typeof(string));
    
            var queParameter = que.HasValue ?
                new ObjectParameter("que", que) :
                new ObjectParameter("que", typeof(int));
    
            var typeaccessParameter = typeaccess != null ?
                new ObjectParameter("typeaccess", typeaccess) :
                new ObjectParameter("typeaccess", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertFloorDetails", flnameParameter, buscodeParameter, highoffParameter, queParameter, typeaccessParameter, notesParameter);
        }
    
        public virtual int sp_insertSystemInfo(string schname, string scheng, string logoloc, string semname, Nullable<System.DateTime> semstart, Nullable<int> semweeks, string sun, string mon, string tue, string wed, string fri, string thu, string sat, Nullable<int> semno, string autoholiday)
        {
            var schnameParameter = schname != null ?
                new ObjectParameter("schname", schname) :
                new ObjectParameter("schname", typeof(string));
    
            var schengParameter = scheng != null ?
                new ObjectParameter("scheng", scheng) :
                new ObjectParameter("scheng", typeof(string));
    
            var logolocParameter = logoloc != null ?
                new ObjectParameter("logoloc", logoloc) :
                new ObjectParameter("logoloc", typeof(string));
    
            var semnameParameter = semname != null ?
                new ObjectParameter("semname", semname) :
                new ObjectParameter("semname", typeof(string));
    
            var semstartParameter = semstart.HasValue ?
                new ObjectParameter("semstart", semstart) :
                new ObjectParameter("semstart", typeof(System.DateTime));
    
            var semweeksParameter = semweeks.HasValue ?
                new ObjectParameter("semweeks", semweeks) :
                new ObjectParameter("semweeks", typeof(int));
    
            var sunParameter = sun != null ?
                new ObjectParameter("sun", sun) :
                new ObjectParameter("sun", typeof(string));
    
            var monParameter = mon != null ?
                new ObjectParameter("mon", mon) :
                new ObjectParameter("mon", typeof(string));
    
            var tueParameter = tue != null ?
                new ObjectParameter("tue", tue) :
                new ObjectParameter("tue", typeof(string));
    
            var wedParameter = wed != null ?
                new ObjectParameter("wed", wed) :
                new ObjectParameter("wed", typeof(string));
    
            var friParameter = fri != null ?
                new ObjectParameter("fri", fri) :
                new ObjectParameter("fri", typeof(string));
    
            var thuParameter = thu != null ?
                new ObjectParameter("thu", thu) :
                new ObjectParameter("thu", typeof(string));
    
            var satParameter = sat != null ?
                new ObjectParameter("sat", sat) :
                new ObjectParameter("sat", typeof(string));
    
            var semnoParameter = semno.HasValue ?
                new ObjectParameter("semno", semno) :
                new ObjectParameter("semno", typeof(int));
    
            var autoholidayParameter = autoholiday != null ?
                new ObjectParameter("autoholiday", autoholiday) :
                new ObjectParameter("autoholiday", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertSystemInfo", schnameParameter, schengParameter, logolocParameter, semnameParameter, semstartParameter, semweeksParameter, sunParameter, monParameter, tueParameter, wedParameter, friParameter, thuParameter, satParameter, semnoParameter, autoholidayParameter);
        }
    
        public virtual int sp_InsertUpdateReserverTransfer(string typ, string nonwork, string autoreview, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, string semname)
        {
            var typParameter = typ != null ?
                new ObjectParameter("typ", typ) :
                new ObjectParameter("typ", typeof(string));
    
            var nonworkParameter = nonwork != null ?
                new ObjectParameter("nonwork", nonwork) :
                new ObjectParameter("nonwork", typeof(string));
    
            var autoreviewParameter = autoreview != null ?
                new ObjectParameter("autoreview", autoreview) :
                new ObjectParameter("autoreview", typeof(string));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var semnameParameter = semname != null ?
                new ObjectParameter("semname", semname) :
                new ObjectParameter("semname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertUpdateReserverTransfer", typParameter, nonworkParameter, autoreviewParameter, startdateParameter, enddateParameter, semnameParameter);
        }
    
        public virtual int sp_insertUpdateSection(string semname, string sec, Nullable<System.TimeSpan> starttime, Nullable<System.TimeSpan> stoptime)
        {
            var semnameParameter = semname != null ?
                new ObjectParameter("semname", semname) :
                new ObjectParameter("semname", typeof(string));
    
            var secParameter = sec != null ?
                new ObjectParameter("sec", sec) :
                new ObjectParameter("sec", typeof(string));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.TimeSpan));
    
            var stoptimeParameter = stoptime.HasValue ?
                new ObjectParameter("stoptime", stoptime) :
                new ObjectParameter("stoptime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insertUpdateSection", semnameParameter, secParameter, starttimeParameter, stoptimeParameter);
        }
    
        public virtual int sp_LoginUser(string userid, string pass)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_LoginUser", useridParameter, passParameter);
        }
    
        public virtual int sp_SaveClassData(string cname, string tbuild, string tfloor, Nullable<int> tseat, string ccip, string camipS, string camipT, string deskip, string recip, string ccmac, string camSmac, string camid, string campass, string camTmac, Nullable<int> camport, string deskmac, string recmac, string callhelpip, string callhelpmac)
        {
            var cnameParameter = cname != null ?
                new ObjectParameter("cname", cname) :
                new ObjectParameter("cname", typeof(string));
    
            var tbuildParameter = tbuild != null ?
                new ObjectParameter("tbuild", tbuild) :
                new ObjectParameter("tbuild", typeof(string));
    
            var tfloorParameter = tfloor != null ?
                new ObjectParameter("tfloor", tfloor) :
                new ObjectParameter("tfloor", typeof(string));
    
            var tseatParameter = tseat.HasValue ?
                new ObjectParameter("tseat", tseat) :
                new ObjectParameter("tseat", typeof(int));
    
            var ccipParameter = ccip != null ?
                new ObjectParameter("ccip", ccip) :
                new ObjectParameter("ccip", typeof(string));
    
            var camipSParameter = camipS != null ?
                new ObjectParameter("camipS", camipS) :
                new ObjectParameter("camipS", typeof(string));
    
            var camipTParameter = camipT != null ?
                new ObjectParameter("camipT", camipT) :
                new ObjectParameter("camipT", typeof(string));
    
            var deskipParameter = deskip != null ?
                new ObjectParameter("deskip", deskip) :
                new ObjectParameter("deskip", typeof(string));
    
            var recipParameter = recip != null ?
                new ObjectParameter("recip", recip) :
                new ObjectParameter("recip", typeof(string));
    
            var ccmacParameter = ccmac != null ?
                new ObjectParameter("ccmac", ccmac) :
                new ObjectParameter("ccmac", typeof(string));
    
            var camSmacParameter = camSmac != null ?
                new ObjectParameter("camSmac", camSmac) :
                new ObjectParameter("camSmac", typeof(string));
    
            var camidParameter = camid != null ?
                new ObjectParameter("camid", camid) :
                new ObjectParameter("camid", typeof(string));
    
            var campassParameter = campass != null ?
                new ObjectParameter("campass", campass) :
                new ObjectParameter("campass", typeof(string));
    
            var camTmacParameter = camTmac != null ?
                new ObjectParameter("camTmac", camTmac) :
                new ObjectParameter("camTmac", typeof(string));
    
            var camportParameter = camport.HasValue ?
                new ObjectParameter("camport", camport) :
                new ObjectParameter("camport", typeof(int));
    
            var deskmacParameter = deskmac != null ?
                new ObjectParameter("deskmac", deskmac) :
                new ObjectParameter("deskmac", typeof(string));
    
            var recmacParameter = recmac != null ?
                new ObjectParameter("recmac", recmac) :
                new ObjectParameter("recmac", typeof(string));
    
            var callhelpipParameter = callhelpip != null ?
                new ObjectParameter("callhelpip", callhelpip) :
                new ObjectParameter("callhelpip", typeof(string));
    
            var callhelpmacParameter = callhelpmac != null ?
                new ObjectParameter("callhelpmac", callhelpmac) :
                new ObjectParameter("callhelpmac", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveClassData", cnameParameter, tbuildParameter, tfloorParameter, tseatParameter, ccipParameter, camipSParameter, camipTParameter, deskipParameter, recipParameter, ccmacParameter, camSmacParameter, camidParameter, campassParameter, camTmacParameter, camportParameter, deskmacParameter, recmacParameter, callhelpipParameter, callhelpmacParameter);
        }
    
        public virtual int sp_SaveOrganisationDeptData(string deptname, string buscode, string highoff, Nullable<int> que, string typeaccess, string notes)
        {
            var deptnameParameter = deptname != null ?
                new ObjectParameter("deptname", deptname) :
                new ObjectParameter("deptname", typeof(string));
    
            var buscodeParameter = buscode != null ?
                new ObjectParameter("buscode", buscode) :
                new ObjectParameter("buscode", typeof(string));
    
            var highoffParameter = highoff != null ?
                new ObjectParameter("highoff", highoff) :
                new ObjectParameter("highoff", typeof(string));
    
            var queParameter = que.HasValue ?
                new ObjectParameter("que", que) :
                new ObjectParameter("que", typeof(int));
    
            var typeaccessParameter = typeaccess != null ?
                new ObjectParameter("typeaccess", typeaccess) :
                new ObjectParameter("typeaccess", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveOrganisationDeptData", deptnameParameter, buscodeParameter, highoffParameter, queParameter, typeaccessParameter, notesParameter);
        }
    
        public virtual int sp_SaveStudentData(string id, string tname, string gend, Nullable<System.DateTime> bdate, string fac, string ph, string idcrd, string onecrd)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var tnameParameter = tname != null ?
                new ObjectParameter("tname", tname) :
                new ObjectParameter("tname", typeof(string));
    
            var gendParameter = gend != null ?
                new ObjectParameter("gend", gend) :
                new ObjectParameter("gend", typeof(string));
    
            var bdateParameter = bdate.HasValue ?
                new ObjectParameter("bdate", bdate) :
                new ObjectParameter("bdate", typeof(System.DateTime));
    
            var facParameter = fac != null ?
                new ObjectParameter("fac", fac) :
                new ObjectParameter("fac", typeof(string));
    
            var phParameter = ph != null ?
                new ObjectParameter("ph", ph) :
                new ObjectParameter("ph", typeof(string));
    
            var idcrdParameter = idcrd != null ?
                new ObjectParameter("idcrd", idcrd) :
                new ObjectParameter("idcrd", typeof(string));
    
            var onecrdParameter = onecrd != null ?
                new ObjectParameter("onecrd", onecrd) :
                new ObjectParameter("onecrd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveStudentData", idParameter, tnameParameter, gendParameter, bdateParameter, facParameter, phParameter, idcrdParameter, onecrdParameter);
        }
    
        public virtual int sp_SaveTeacherData(string id, string tname, string gend, Nullable<System.DateTime> bdate, string fac, string ph, string idcrd, string onecrd)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var tnameParameter = tname != null ?
                new ObjectParameter("tname", tname) :
                new ObjectParameter("tname", typeof(string));
    
            var gendParameter = gend != null ?
                new ObjectParameter("gend", gend) :
                new ObjectParameter("gend", typeof(string));
    
            var bdateParameter = bdate.HasValue ?
                new ObjectParameter("bdate", bdate) :
                new ObjectParameter("bdate", typeof(System.DateTime));
    
            var facParameter = fac != null ?
                new ObjectParameter("fac", fac) :
                new ObjectParameter("fac", typeof(string));
    
            var phParameter = ph != null ?
                new ObjectParameter("ph", ph) :
                new ObjectParameter("ph", typeof(string));
    
            var idcrdParameter = idcrd != null ?
                new ObjectParameter("idcrd", idcrd) :
                new ObjectParameter("idcrd", typeof(string));
    
            var onecrdParameter = onecrd != null ?
                new ObjectParameter("onecrd", onecrd) :
                new ObjectParameter("onecrd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveTeacherData", idParameter, tnameParameter, gendParameter, bdateParameter, facParameter, phParameter, idcrdParameter, onecrdParameter);
        }
    
        public virtual int sp_SaveUserData(string logid, string uname, string ptype, Nullable<int> deptname, string stats, string phone, string note, string pass, Nullable<System.DateTime> expiredate, Nullable<System.DateTime> startdate)
        {
            var logidParameter = logid != null ?
                new ObjectParameter("logid", logid) :
                new ObjectParameter("logid", typeof(string));
    
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var ptypeParameter = ptype != null ?
                new ObjectParameter("ptype", ptype) :
                new ObjectParameter("ptype", typeof(string));
    
            var deptnameParameter = deptname.HasValue ?
                new ObjectParameter("deptname", deptname) :
                new ObjectParameter("deptname", typeof(int));
    
            var statsParameter = stats != null ?
                new ObjectParameter("stats", stats) :
                new ObjectParameter("stats", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var expiredateParameter = expiredate.HasValue ?
                new ObjectParameter("expiredate", expiredate) :
                new ObjectParameter("expiredate", typeof(System.DateTime));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SaveUserData", logidParameter, unameParameter, ptypeParameter, deptnameParameter, statsParameter, phoneParameter, noteParameter, passParameter, expiredateParameter, startdateParameter);
        }
    
        public virtual int sp_ScheduleByBuildingAndDate(Nullable<System.DateTime> customdate, string building, string userid)
        {
            var customdateParameter = customdate.HasValue ?
                new ObjectParameter("customdate", customdate) :
                new ObjectParameter("customdate", typeof(System.DateTime));
    
            var buildingParameter = building != null ?
                new ObjectParameter("building", building) :
                new ObjectParameter("building", typeof(string));
    
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ScheduleByBuildingAndDate", customdateParameter, buildingParameter, useridParameter);
        }
    
        public virtual int sp_UpdateBuildingData(string deptname, string buscode, string que, string typeaccess, string note, Nullable<int> sn)
        {
            var deptnameParameter = deptname != null ?
                new ObjectParameter("deptname", deptname) :
                new ObjectParameter("deptname", typeof(string));
    
            var buscodeParameter = buscode != null ?
                new ObjectParameter("buscode", buscode) :
                new ObjectParameter("buscode", typeof(string));
    
            var queParameter = que != null ?
                new ObjectParameter("que", que) :
                new ObjectParameter("que", typeof(string));
    
            var typeaccessParameter = typeaccess != null ?
                new ObjectParameter("typeaccess", typeaccess) :
                new ObjectParameter("typeaccess", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var snParameter = sn.HasValue ?
                new ObjectParameter("sn", sn) :
                new ObjectParameter("sn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateBuildingData", deptnameParameter, buscodeParameter, queParameter, typeaccessParameter, noteParameter, snParameter);
        }
    
        public virtual int sp_UpdateClassData(Nullable<int> clsid, string cname, Nullable<int> tbuild, Nullable<int> tfloor, Nullable<int> tseat, string ccip, string camsip, string camtip, string deskip, string recip, string ccmac, string camsmac, Nullable<int> camport, string camid, string campass, string camtmac, string deskmac, string recmac, string callhelpip, string callhelpmac)
        {
            var clsidParameter = clsid.HasValue ?
                new ObjectParameter("clsid", clsid) :
                new ObjectParameter("clsid", typeof(int));
    
            var cnameParameter = cname != null ?
                new ObjectParameter("cname", cname) :
                new ObjectParameter("cname", typeof(string));
    
            var tbuildParameter = tbuild.HasValue ?
                new ObjectParameter("tbuild", tbuild) :
                new ObjectParameter("tbuild", typeof(int));
    
            var tfloorParameter = tfloor.HasValue ?
                new ObjectParameter("tfloor", tfloor) :
                new ObjectParameter("tfloor", typeof(int));
    
            var tseatParameter = tseat.HasValue ?
                new ObjectParameter("tseat", tseat) :
                new ObjectParameter("tseat", typeof(int));
    
            var ccipParameter = ccip != null ?
                new ObjectParameter("ccip", ccip) :
                new ObjectParameter("ccip", typeof(string));
    
            var camsipParameter = camsip != null ?
                new ObjectParameter("camsip", camsip) :
                new ObjectParameter("camsip", typeof(string));
    
            var camtipParameter = camtip != null ?
                new ObjectParameter("camtip", camtip) :
                new ObjectParameter("camtip", typeof(string));
    
            var deskipParameter = deskip != null ?
                new ObjectParameter("deskip", deskip) :
                new ObjectParameter("deskip", typeof(string));
    
            var recipParameter = recip != null ?
                new ObjectParameter("recip", recip) :
                new ObjectParameter("recip", typeof(string));
    
            var ccmacParameter = ccmac != null ?
                new ObjectParameter("ccmac", ccmac) :
                new ObjectParameter("ccmac", typeof(string));
    
            var camsmacParameter = camsmac != null ?
                new ObjectParameter("camsmac", camsmac) :
                new ObjectParameter("camsmac", typeof(string));
    
            var camportParameter = camport.HasValue ?
                new ObjectParameter("camport", camport) :
                new ObjectParameter("camport", typeof(int));
    
            var camidParameter = camid != null ?
                new ObjectParameter("camid", camid) :
                new ObjectParameter("camid", typeof(string));
    
            var campassParameter = campass != null ?
                new ObjectParameter("campass", campass) :
                new ObjectParameter("campass", typeof(string));
    
            var camtmacParameter = camtmac != null ?
                new ObjectParameter("camtmac", camtmac) :
                new ObjectParameter("camtmac", typeof(string));
    
            var deskmacParameter = deskmac != null ?
                new ObjectParameter("deskmac", deskmac) :
                new ObjectParameter("deskmac", typeof(string));
    
            var recmacParameter = recmac != null ?
                new ObjectParameter("recmac", recmac) :
                new ObjectParameter("recmac", typeof(string));
    
            var callhelpipParameter = callhelpip != null ?
                new ObjectParameter("callhelpip", callhelpip) :
                new ObjectParameter("callhelpip", typeof(string));
    
            var callhelpmacParameter = callhelpmac != null ?
                new ObjectParameter("callhelpmac", callhelpmac) :
                new ObjectParameter("callhelpmac", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateClassData", clsidParameter, cnameParameter, tbuildParameter, tfloorParameter, tseatParameter, ccipParameter, camsipParameter, camtipParameter, deskipParameter, recipParameter, ccmacParameter, camsmacParameter, camportParameter, camidParameter, campassParameter, camtmacParameter, deskmacParameter, recmacParameter, callhelpipParameter, callhelpmacParameter);
        }
    
        public virtual int sp_UpdateFloorData(string buildname, string buscode, Nullable<int> que, string typeaccess, string note, Nullable<int> sn, string floorname)
        {
            var buildnameParameter = buildname != null ?
                new ObjectParameter("buildname", buildname) :
                new ObjectParameter("buildname", typeof(string));
    
            var buscodeParameter = buscode != null ?
                new ObjectParameter("buscode", buscode) :
                new ObjectParameter("buscode", typeof(string));
    
            var queParameter = que.HasValue ?
                new ObjectParameter("que", que) :
                new ObjectParameter("que", typeof(int));
    
            var typeaccessParameter = typeaccess != null ?
                new ObjectParameter("typeaccess", typeaccess) :
                new ObjectParameter("typeaccess", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var snParameter = sn.HasValue ?
                new ObjectParameter("sn", sn) :
                new ObjectParameter("sn", typeof(int));
    
            var floornameParameter = floorname != null ?
                new ObjectParameter("floorname", floorname) :
                new ObjectParameter("floorname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateFloorData", buildnameParameter, buscodeParameter, queParameter, typeaccessParameter, noteParameter, snParameter, floornameParameter);
        }
    
        public virtual int sp_UPdateOrganisationDeptData(string deptname, string buscode, string highoff, Nullable<int> que, string typeaccess, string note, Nullable<int> sn)
        {
            var deptnameParameter = deptname != null ?
                new ObjectParameter("deptname", deptname) :
                new ObjectParameter("deptname", typeof(string));
    
            var buscodeParameter = buscode != null ?
                new ObjectParameter("buscode", buscode) :
                new ObjectParameter("buscode", typeof(string));
    
            var highoffParameter = highoff != null ?
                new ObjectParameter("highoff", highoff) :
                new ObjectParameter("highoff", typeof(string));
    
            var queParameter = que.HasValue ?
                new ObjectParameter("que", que) :
                new ObjectParameter("que", typeof(int));
    
            var typeaccessParameter = typeaccess != null ?
                new ObjectParameter("typeaccess", typeaccess) :
                new ObjectParameter("typeaccess", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var snParameter = sn.HasValue ?
                new ObjectParameter("sn", sn) :
                new ObjectParameter("sn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UPdateOrganisationDeptData", deptnameParameter, buscodeParameter, highoffParameter, queParameter, typeaccessParameter, noteParameter, snParameter);
        }
    
        public virtual int sp_UpdateStudentData(string id, string tname, string gend, Nullable<System.DateTime> bdate, string fac, string ph, string idcrd, string onecrd)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var tnameParameter = tname != null ?
                new ObjectParameter("tname", tname) :
                new ObjectParameter("tname", typeof(string));
    
            var gendParameter = gend != null ?
                new ObjectParameter("gend", gend) :
                new ObjectParameter("gend", typeof(string));
    
            var bdateParameter = bdate.HasValue ?
                new ObjectParameter("bdate", bdate) :
                new ObjectParameter("bdate", typeof(System.DateTime));
    
            var facParameter = fac != null ?
                new ObjectParameter("fac", fac) :
                new ObjectParameter("fac", typeof(string));
    
            var phParameter = ph != null ?
                new ObjectParameter("ph", ph) :
                new ObjectParameter("ph", typeof(string));
    
            var idcrdParameter = idcrd != null ?
                new ObjectParameter("idcrd", idcrd) :
                new ObjectParameter("idcrd", typeof(string));
    
            var onecrdParameter = onecrd != null ?
                new ObjectParameter("onecrd", onecrd) :
                new ObjectParameter("onecrd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateStudentData", idParameter, tnameParameter, gendParameter, bdateParameter, facParameter, phParameter, idcrdParameter, onecrdParameter);
        }
    
        public virtual int sp_UpdateTeacherData(string id, string tname, string gend, Nullable<int> ag, string fac, string ph, string idcrd, string onecrd)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var tnameParameter = tname != null ?
                new ObjectParameter("tname", tname) :
                new ObjectParameter("tname", typeof(string));
    
            var gendParameter = gend != null ?
                new ObjectParameter("gend", gend) :
                new ObjectParameter("gend", typeof(string));
    
            var agParameter = ag.HasValue ?
                new ObjectParameter("ag", ag) :
                new ObjectParameter("ag", typeof(int));
    
            var facParameter = fac != null ?
                new ObjectParameter("fac", fac) :
                new ObjectParameter("fac", typeof(string));
    
            var phParameter = ph != null ?
                new ObjectParameter("ph", ph) :
                new ObjectParameter("ph", typeof(string));
    
            var idcrdParameter = idcrd != null ?
                new ObjectParameter("idcrd", idcrd) :
                new ObjectParameter("idcrd", typeof(string));
    
            var onecrdParameter = onecrd != null ?
                new ObjectParameter("onecrd", onecrd) :
                new ObjectParameter("onecrd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateTeacherData", idParameter, tnameParameter, gendParameter, agParameter, facParameter, phParameter, idcrdParameter, onecrdParameter);
        }
    
        public virtual int sp_UpdateUserData(string logid, string uname, string ptype, Nullable<int> deptname, string phone, string note, string pass, Nullable<System.DateTime> expiredate, Nullable<System.DateTime> startdate)
        {
            var logidParameter = logid != null ?
                new ObjectParameter("logid", logid) :
                new ObjectParameter("logid", typeof(string));
    
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var ptypeParameter = ptype != null ?
                new ObjectParameter("ptype", ptype) :
                new ObjectParameter("ptype", typeof(string));
    
            var deptnameParameter = deptname.HasValue ?
                new ObjectParameter("deptname", deptname) :
                new ObjectParameter("deptname", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var noteParameter = note != null ?
                new ObjectParameter("note", note) :
                new ObjectParameter("note", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var expiredateParameter = expiredate.HasValue ?
                new ObjectParameter("expiredate", expiredate) :
                new ObjectParameter("expiredate", typeof(System.DateTime));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateUserData", logidParameter, unameParameter, ptypeParameter, deptnameParameter, phoneParameter, noteParameter, passParameter, expiredateParameter, startdateParameter);
        }
    }
}
